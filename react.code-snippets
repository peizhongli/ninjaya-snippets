{
  "jsxFunction": {
    "prefix": "jrf",
    "body": [
      "import React, { useState, useEffect, useMemo, useCallback } from 'react';",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} = props => {",
      "\tconst {} = props;",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$2",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
      ""
    ],
    "description": "javascript react function"
  },
  "tsxFunction": {
    "prefix": "trf",
    "body": [
      "import React, { FC, useState, useEffect, useMemo, useCallback } from 'react';",
      "",
      "interface IProps {",
      "",
      "};",
      "",
      "interface IStates {",
      "",
      "};",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}: FC<IProps> = props => {",
      "\tconst {} = props;",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$2",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
      ""
    ],
    "description": "typescript react function"
  },
  "tsxClass": {
    "prefix": "trc",
    "body": [
      "import React, { FC, useState, useEffect, useMemo, useCallback } from 'react';",
      "",
      "interface IProps {",
      "",
      "};",
      "",
      "interface IStates {",
      "",
      "};",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}: FC<IProps> = props => {",
      "\tconst {} = props;",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$2",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/};",
      ""
    ],
    "description": "typescript react class"
  },
  "useState": {
    "prefix": "ust",
    "body": [
      "const [${1}, set${1/(.*)/${1:/pascalcase}/}] = useState($2)",
      ""
    ],
    "description": "useState snippets"
  },
  "useEffect": {
    "prefix": "-effect",
    "body": [
      "useEffect(() => {",
      "\t$1",
      // "\treturn () => {$2}",
      "}, []);",
      ""
    ],
    "description": "useEffect snippets"
  },
  "useRef": {
    "prefix": "-ref",
    "body": [
      "const $1 = useRef($2)",
      ""
    ],
    "description": "useEffect snippets"
  },

  "useMemo": {
    "prefix": "-memo",
    "body": [
      "const $1 = useMemo(() => $2, [$3])",
      ""
    ],
    "description": "useMemo snippets"
  },

  "useCallback": {
    "prefix": "-ucall",
    "body": [
      "const $1 = useCallback(() => {",
      "\treturn $2;",
      "}, [$3])",
      ""
    ],
    "description": "useCallback snippets"
  },

  "useImperativeHandle": {
    "prefix": "-ime",
    "body": [
      "useImperativeHandle(ref, () => ({",
      "\t$1: $2,",
      "}));",
      ""
    ],
    "description": "useImperativeHandle snippets"
  },

  "useContext": {
    "prefix": "-uctx",
    "body": [
      "const { $1 } = useContext($2);",
      ""
    ],
    "description": "useContext snippets"
  },

  "exportContext": {
    "prefix": "-ctx",
    "body": [
      "export const $1 = createContext({ $2: $3 });",
      ""
    ],
    "description": "export Context snippets"
  },
  
  "contextProvider": {
    "prefix": "-ctxp",
    "body": [
      "<${1/(.*)/${1:/pascalcase}/}.Provider",
      "\tvalue={{",
      "\t\t$2,",
      "\t}}",
      ">",
      ""
    ],
    "description": "context Provider snippets"
  },
}